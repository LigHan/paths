import { Ionicons } from '@expo/vector-icons';

export type WorkingHours = {
  label: string;
  value: string;
};

export type Review = {
  id: string;
  author: string;
  comment: string;
  rating: number;
  date: string;
};

export type ContactInfo = {
  label: string;
  value: string;
  icon: keyof typeof Ionicons.glyphMap;
};

export type Story = {
  id: string;
  userName: string;
  avatar: string;
  image: string;
  text: string;
  postId: string;
};

export type Post = {
  id: string;
  user: string;
  userAvatar: string;
  userHandle: string;
  place: string;
  image: string;
  gallery: string[];
  likes: number;
  totalLikes: number;
  followers: number;
  rating: number;
  tags: string[];
  bio: string;
  address: string;
  category: string;
  workingHours: WorkingHours[];
  reviews: Review[];
  contact: ContactInfo[];
};

export const formatCompactNumber = (number: number): string => {
  if (number < 1000) {
    return number.toString();
  } else if (number < 1000000) {
    return (number / 1000).toFixed(1).replace(/\.0$/, '') + 'K';
  } else {
    return (number / 1000000).toFixed(1).replace(/\.0$/, '') + 'M';
  }
};

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = 'http://192.168.0.116:3000';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –±—ç–∫–µ–Ω–¥–∞
export const databaseService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã
  async getPosts(): Promise<Post[]> {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞...');
      const response = await fetch(`${API_BASE_URL}/api/posts`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const posts = await response.json();
      
      // –í–†–ï–ú–ï–ù–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üîç –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –û–¢ API:');
      if (posts.length > 0) {
        const firstPost = posts[0];
        console.log('–ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç:', firstPost);
        console.log('–í—Å–µ –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞:', Object.keys(firstPost));
        console.log('–ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ address?', 'address' in firstPost);
        console.log('–ó–Ω–∞—á–µ–Ω–∏–µ address:', firstPost.address);
      }
      
      console.log('‚úÖ –ü–æ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —Å –±—ç–∫–µ–Ω–¥–∞:', posts.length);
      return posts;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏
  async getStories(): Promise<Story[]> {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–π —Å –±—ç–∫–µ–Ω–¥–∞...');
      const response = await fetch(`${API_BASE_URL}/api/stories`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const stories = await response.json();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å –±—ç–∫–µ–Ω–¥–∞:', stories.length);
      return stories;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–π:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
  async getPostById(id: string): Promise<Post | null> {
    try {
      console.log(`üì° –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞ ${id} —Å –±—ç–∫–µ–Ω–¥–∞...`);
      const response = await fetch(`${API_BASE_URL}/api/posts/${id}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          return null;
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const post = await response.json();
      console.log('‚úÖ –ü–æ—Å—Ç –ø–æ–ª—É—á–µ–Ω —Å –±—ç–∫–µ–Ω–¥–∞:', post.id);
      return post;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞:', error);
      throw error;
    }
  }
};