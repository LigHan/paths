import AsyncStorage from '@react-native-async-storage/async-storage';
import { getUserSession } from './user-session';

// –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–æ–≤ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const getLikedPostsKey = (userId: number) => `liked-posts-${userId}`;
const getFavoritePostsKey = (userId: number) => `favorite-posts-${userId}`;

// –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getCurrentUserId = async (): Promise<number | null> => {
  try {
    const session = await getUserSession();
    return session?.id || null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function isUserAuthenticated(): Promise<boolean> {
  try {
    const session = await getUserSession();
    return !!session?.id;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–Ω—É—Ç—ã–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getLikedPosts(): Promise<string[]> {
  try {
    const userId = await getCurrentUserId();
    if (!userId) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–æ–≤');
      return [];
    }

    const likedPostsData = await AsyncStorage.getItem(getLikedPostsKey(userId));
    return likedPostsData ? JSON.parse(likedPostsData) : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getFavoritePosts(): Promise<string[]> {
  try {
    const userId = await getCurrentUserId();
    if (!userId) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      return [];
    }

    const favoritePostsData = await AsyncStorage.getItem(getFavoritePostsKey(userId));
    return favoritePostsData ? JSON.parse(favoritePostsData) : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:', error);
    return [];
  }
}

// –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ª–∞–π–∫
export async function toggleLike(postId: string): Promise<{success: boolean; requiresAuth: boolean}> {
  try {
    const userId = await getCurrentUserId();
    if (!userId) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–∞–π–∫–∞');
      return { success: false, requiresAuth: true };
    }

    const currentLiked = await getLikedPosts();
    const isLiked = currentLiked.includes(postId);
    
    let newLiked: string[];
    if (isLiked) {
      // –£–¥–∞–ª—è–µ–º –ª–∞–π–∫
      newLiked = currentLiked.filter(id => id !== postId);
      console.log(`üëé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–±—Ä–∞–ª –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞ ${postId}`);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
      newLiked = [...currentLiked, postId];
      console.log(`üëç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ª–∞–π–∫–Ω—É–ª –ø–æ—Å—Ç ${postId}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage –ø–æ–¥ –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await AsyncStorage.setItem(getLikedPostsKey(userId), JSON.stringify(newLiked));
    console.log('‚úÖ –õ–∞–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    return { success: true, requiresAuth: false };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–∞–π–∫–∞:', error);
    return { success: false, requiresAuth: false };
  }
}

// –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export async function toggleFavorite(postId: string): Promise<{success: boolean; requiresAuth: boolean}> {
  try {
    const userId = await getCurrentUserId();
    if (!userId) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      return { success: false, requiresAuth: true };
    }

    const currentFavorites = await getFavoritePosts();
    const isFavorite = currentFavorites.includes(postId);
    
    let newFavorites: string[];
    if (isFavorite) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      newFavorites = currentFavorites.filter(id => id !== postId);
      console.log(`üìï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–±—Ä–∞–ª –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç ${postId}`);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      newFavorites = [...currentFavorites, postId];
      console.log(`üìó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ—Å—Ç ${postId}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage –ø–æ–¥ –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await AsyncStorage.setItem(getFavoritePostsKey(userId), JSON.stringify(newFavorites));
    console.log('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    return { success: true, requiresAuth: false };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
    return { success: false, requiresAuth: false };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ª–∞–π–∫–Ω—É—Ç –ª–∏ –ø–æ—Å—Ç
export async function isPostLiked(postId: string): Promise<boolean> {
  try {
    const likedPosts = await getLikedPosts();
    return likedPosts.includes(postId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–π–∫–∞:', error);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ –ø–æ—Å—Ç
export async function isPostFavorite(postId: string): Promise<boolean> {
  try {
    const favoritePosts = await getFavoritePosts();
    return favoritePosts.includes(postId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
    return false;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getLikedPostsCount(): Promise<number> {
  try {
    const likedPosts = await getLikedPosts();
    return likedPosts.length;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤:', error);
    return 0;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
export async function getFavoritePostsCount(): Promise<number> {
  try {
    const favoritePosts = await getFavoritePosts();
    return favoritePosts.length;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö:', error);
    return 0;
  }
}

// –û—á–∏—Å—Ç–∏—Ç—å –ª–∞–π–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞)
export async function clearUserLikesAndFavorites(userId: number): Promise<void> {
  try {
    await AsyncStorage.removeItem(getLikedPostsKey(userId));
    await AsyncStorage.removeItem(getFavoritePostsKey(userId));
    console.log(`üßπ –õ–∞–π–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—á–∏—â–µ–Ω—ã`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
    throw error;
  }
}