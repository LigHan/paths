import AsyncStorage from '@react-native-async-storage/async-storage';

export interface UserSession {
  id: string;
  email: string;
  name: string;
  surname: string | null;
  role: 'user' | 'company';
  handle: string;
  avatar: string;
  accountType: 'user' | 'company';
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ favorites –∏ liked
  favorites: string[];
  liked: string[];
  following: Array<{
    id: string;
    name: string;
    handle: string;
    avatar: string;
    description: string;
  }>;
}

const USER_SESSION_KEY = 'user-session';

export async function setUserSession(session: UserSession): Promise<void> {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', session);
    await AsyncStorage.setItem(USER_SESSION_KEY, JSON.stringify(session));
    console.log('‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    throw error;
  }
}

export async function getUserSession(): Promise<UserSession | null> {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ AsyncStorage...');
    const sessionData = await AsyncStorage.getItem(USER_SESSION_KEY);
    
    if (!sessionData) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ AsyncStorage');
      return null;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (typeof sessionData !== 'string') {
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π:', typeof sessionData);
      return null;
    }

    if (sessionData === '[object Promise]' || sessionData === '[object Object]') {
      console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', sessionData);
      return null;
    }

    try {
      const session = JSON.parse(sessionData);
      console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', session);
      return session;
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    return null;
  }
}

export async function clearUserSession(): Promise<void> {
  try {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await AsyncStorage.removeItem(USER_SESSION_KEY);
    console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    throw error;
  }
}

// –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ª–∞–π–∫–æ–≤ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)
export async function clearUserSessionOnly(): Promise<void> {
  try {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await AsyncStorage.removeItem(USER_SESSION_KEY);
    console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞ (–ª–∞–π–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    throw error;
  }
}